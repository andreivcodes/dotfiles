---
# Reusable task file for creating LXC containers
# Usage: include this task file with the following variables:
#   - container_id: LXC container ID
#   - container_hostname: hostname for the container
#   - container_template: Proxmox template name (without .tar.zst)
#   - container_storage: storage location (e.g., "ssd-raid")
#   - container_disk_size: disk size in GB
#   - container_cores: CPU cores
#   - container_memory: RAM in MB
#   - container_network: network configuration string
#   - container_features: features string (e.g., "nesting=1,keyctl=1")
#   - container_unprivileged: boolean (default: true)
#   - container_onboot: boolean (default: true)
#   - container_start: boolean (default: false)

- name: Set default values for container creation
  set_fact:
    container_unprivileged: "{{ container_unprivileged | default(true) }}"
    container_onboot: "{{ container_onboot | default(true) }}"
    container_start: "{{ container_start | default(false) }}"
    container_description: "{{ container_description | default('Created by Ansible') }}"

- name: Validate required variables
  assert:
    that:
      - container_id is defined
      - container_hostname is defined
      - container_template is defined
      - container_storage is defined
      - container_disk_size is defined
      - container_cores is defined
      - container_memory is defined
      - container_network is defined
    fail_msg: "Missing required variables for LXC container creation"

- name: Check if container template exists
  command: pveam list local
  register: available_templates
  changed_when: false

- name: Update template list if template not found
  command: pveam update
  when: container_template not in available_templates.stdout
  register: template_update

- name: Download template if not present
  command: "pveam download local {{ container_template }}.tar.zst"
  when: container_template not in available_templates.stdout
  register: template_download
  failed_when: 
    - template_download.rc != 0
    - "'already exists' not in template_download.stderr"

- name: Check if container already exists
  command: "pct status {{ container_id }}"
  register: container_exists
  failed_when: false
  changed_when: false

- name: Stop existing container if running
  command: "pct stop {{ container_id }}"
  when: 
    - container_exists.rc == 0
    - "'running' in container_exists.stdout"
  failed_when: false

- name: Destroy existing container if force_recreate is true
  command: "pct destroy {{ container_id }}"
  when:
    - container_exists.rc == 0
    - force_recreate | default(false)
  register: container_destroyed

- name: Create new LXC container
  command: |
    pct create {{ container_id }} local:vztmpl/{{ container_template }}.tar.zst \
      --hostname {{ container_hostname }} \
      --description "{{ container_description }}" \
      --cores {{ container_cores }} \
      --memory {{ container_memory }} \
      --{{ container_network }} \
      --rootfs {{ container_storage }}:{{ container_disk_size }} \
      {% if container_features is defined %}--features {{ container_features }} \{% endif %}
      --unprivileged {{ container_unprivileged | int }} \
      --onboot {{ container_onboot | int }} \
      --start {{ container_start | int }}
  when: 
    - container_exists.rc != 0 or (force_recreate | default(false))
  register: container_created
  changed_when: container_created.rc == 0

- name: Display container creation result
  debug:
    msg: 
      - "Container {{ container_id }} ({{ container_hostname }}) {{ 'created' if container_created.changed else 'already exists' }}"
      - "Template: {{ container_template }}"
      - "Resources: {{ container_cores }} cores, {{ container_memory }}MB RAM, {{ container_disk_size }}GB disk"
      - "Storage: {{ container_storage }}"
      - "Network: {{ container_network }}"
      {% if container_features is defined %}- "Features: {{ container_features }}"{% endif %}