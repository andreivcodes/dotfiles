---
- name: Tailscale Installation and Configuration
  hosts: proxmox
  gather_facts: true
  become: true
  vars_files:
    - ../group_vars/all/main.yml
    - ../group_vars/all/vault.yml

  tags:
    - tailscale
    - vpn

  tasks:
    - name: Check if Tailscale is enabled
      debug:
        msg: "Tailscale is {{ 'enabled' if tailscale_enabled | default(false) else 'disabled' }}"
      tags: always

    - block:
        - name: Add Tailscale GPG key
          get_url:
            url: https://pkgs.tailscale.com/stable/debian/trixie.noarmor.gpg
            dest: /usr/share/keyrings/tailscale-archive-keyring.gpg
            mode: "0644"

        - name: Add Tailscale repository
          apt_repository:
            repo: "deb [signed-by=/usr/share/keyrings/tailscale-archive-keyring.gpg] https://pkgs.tailscale.com/stable/debian trixie main"
            state: present
            filename: tailscale

        - name: Install Tailscale
          apt:
            name: tailscale
            state: present
            update_cache: yes
          register: tailscale_pkg
          failed_when: tailscale_pkg is failed and (not ansible_check_mode | default(false))

        - name: Detect tailscale binary
          command: which tailscale
          register: tailscale_bin
          failed_when: false
          changed_when: false

        - name: Gather service facts
          service_facts:

        - name: Enable and start tailscaled
          systemd:
            name: tailscaled
            enabled: yes
            state: started
          when: not (ansible_check_mode | default(false)) and ('tailscaled.service' in ansible_facts.services)

        - name: Always re-authenticate for fresh state
          set_fact:
            needs_auth: true

        - name: Debug authentication approach
          debug:
            msg: "Will delete existing device (if any) and create fresh authentication"
          when: not (ansible_check_mode | default(false))

        - name: Update Tailscale ACL policy
          uri:
            url: "https://api.tailscale.com/api/v2/tailnet/-/acl"
            method: POST
            headers:
              Authorization: "Bearer {{ tailscale_api_token }}"
              Content-Type: application/json
              Accept: application/json
            body_format: json
            body:
              acls:
                - action: accept
                  src: ["*"]
                  dst: ["*:22", "*:8006", "*:8007", "*:3128"]
                - action: accept
                  src: ["tag:proxmox"]
                  dst: ["*:*"]
              tagOwners:
                tag:proxmox: ["autogroup:admin"]
            return_content: yes
            status_code: [200, 201]
          register: ts_acl_update
          delegate_to: localhost
          become: false
          changed_when: ts_acl_update.status in [200, 201]
          when:
            - not (ansible_check_mode | default(false))
            - tailscale_api_token is defined and (tailscale_api_token | length) > 0

        - name: Query all Tailscale devices to find and remove existing ones
          uri:
            url: "https://api.tailscale.com/api/v2/tailnet/-/devices"
            method: GET
            headers:
              Authorization: "Bearer {{ tailscale_api_token }}"
              Accept: application/json
            return_content: yes
            status_code: 200
          register: ts_devices
          no_log: true
          delegate_to: localhost
          become: false
          when:
            - not (ansible_check_mode | default(false))
            - tailscale_api_token is defined and (tailscale_api_token | length) > 0

        - name: Build list of duplicate devices by hostname
          set_fact:
            ts_duplicates: >-
              {{ ((ts_devices.json.devices | default(ts_devices.json)) | default([]))
                 | selectattr('hostname','equalto', inventory_hostname)
                 | list
                 +
                 ((ts_devices.json.devices | default(ts_devices.json)) | default([]))
                 | selectattr('name','equalto', inventory_hostname)
                 | list }}
          when: ts_devices is defined and ts_devices.json is defined
          delegate_to: localhost
          become: false

        - name: Remove ALL existing Tailscale devices with same hostname
          uri:
            url: "https://api.tailscale.com/api/v2/device/{{ item.id }}"
            method: DELETE
            headers:
              Authorization: "Bearer {{ tailscale_api_token }}"
            status_code: [200, 204, 404]
          loop: "{{ ts_duplicates | default([]) }}"
          loop_control:
            label: "{{ item.id }} {{ item.hostname | default(item.name) }}"
          register: ts_delete_results
          delegate_to: localhost
          become: false
          changed_when: true
          when:
            - not (ansible_check_mode | default(false))
            - ts_duplicates is defined
            - (ts_duplicates | length) > 0
            - tailscale_api_token is defined and (tailscale_api_token | length) > 0

        - name: Always create fresh Tailscale auth key
          uri:
            url: "https://api.tailscale.com/api/v2/tailnet/-/keys"
            method: POST
            headers:
              Authorization: "Bearer {{ tailscale_api_token }}"
              Content-Type: application/json
              Accept: application/json
            body_format: json
            body:
              capabilities:
                devices:
                  create:
                    reusable: true
                    ephemeral: false
                    preauthorized: true
                    tags:
                      - "tag:proxmox"
              description: "proxmox-ansible-{{ inventory_hostname }}"
              expirySeconds: 86400
            return_content: yes
            status_code: [200, 201]
          register: ts_key_create
          no_log: true
          delegate_to: localhost
          become: false
          failed_when: false
          changed_when: ts_key_create.status in [200, 201]
          when:
            - not (ansible_check_mode | default(false))
            - tailscale_api_token is defined and (tailscale_api_token | length) > 0

        - name: Choose Tailscale auth key to use
          set_fact:
            ts_auth_key_to_use: "{{ (ts_key_create.json.key | default('')) if (ts_key_create is defined and ts_key_create.json is defined) else tailscale_auth_key }}"
          no_log: true
          when:
            - not (ansible_check_mode | default(false))

        - name: Logout from Tailscale first to ensure clean state
          command: tailscale logout
          failed_when: false
          changed_when: false
          when:
            - not (ansible_check_mode | default(false))
            - tailscale_bin.rc == 0

        - name: Authenticate Tailscale with fresh connection
          shell: |
            tailscale up \
              --authkey={{ ts_auth_key_to_use | default(tailscale_auth_key) }} \
              --hostname={{ inventory_hostname }} \
              --reset 2>&1 &
            sleep 5
            tailscale status > /dev/null 2>&1 || true
          no_log: true
          register: tailscale_auth
          changed_when: true
          failed_when: false
          when:
            - not (ansible_check_mode | default(false))
            - tailscale_bin.rc == 0

        - name: Wait for Tailscale to connect
          command: tailscale status
          register: ts_wait_status
          until: ts_wait_status.rc == 0 or ts_wait_status.stdout is search('Machine is not yet approved')
          retries: 30
          delay: 2
          failed_when: false
          changed_when: false
          when:
            - not (ansible_check_mode | default(false))
            - tailscale_auth is defined
            - tailscale_auth is changed

        - name: Get device ID for approval
          shell: |
            curl -s "https://api.tailscale.com/api/v2/tailnet/-/devices" \
              -H "Authorization: Bearer {{ tailscale_api_token }}" | \
              python3 -c "import json,sys; d=json.load(sys.stdin); \
              devices=[x for x in d.get('devices',[]) if x.get('hostname')=='{{ inventory_hostname }}']; \
              print(devices[0]['id'] if devices else '')"
          register: device_id
          delegate_to: localhost
          become: false
          changed_when: false
          when:
            - not (ansible_check_mode | default(false))
            - ts_wait_status is defined
            - ts_wait_status.stdout is defined
            - ts_wait_status.stdout is search('Machine is not yet approved')
            - tailscale_api_token is defined and (tailscale_api_token | length) > 0

        - name: Approve device via API
          uri:
            url: "https://api.tailscale.com/api/v2/device/{{ device_id.stdout }}/authorized"
            method: POST
            headers:
              Authorization: "Bearer {{ tailscale_api_token }}"
              Content-Type: application/json
            body_format: json
            body:
              authorized: true
            status_code: [200, 201]
          delegate_to: localhost
          become: false
          when:
            - not (ansible_check_mode | default(false))
            - device_id is defined
            - device_id.stdout is defined
            - device_id.stdout | length > 0
            - tailscale_api_token is defined and (tailscale_api_token | length) > 0

        - name: Configure Tailscale with tags
          command: |
            tailscale up \
              --advertise-tags=tag:proxmox \
              --hostname={{ inventory_hostname }}
          register: tailscale_configure
          changed_when: tailscale_configure.rc == 0
          failed_when: false
          when:
            - not (ansible_check_mode | default(false))
            - tailscale_bin.rc == 0

        - name: Configure Tailscale to start on boot
          lineinfile:
            path: /etc/default/tailscaled
            line: 'FLAGS="--state=/var/lib/tailscale/tailscaled.state --socket=/run/tailscale/tailscaled.sock"'
            create: yes

        - name: Verify Tailscale configuration
          command: tailscale status --json
          register: tailscale_verify
          changed_when: false
          failed_when: false
          when: not (ansible_check_mode | default(false)) and tailscale_bin.rc == 0


        - name: Display Tailscale information
          debug:
            msg:
              - "Tailscale Status:"
              - "  Connected: {{ (tailscale_verify.stdout | from_json).Self.Online | default('Unknown') }}"
              - "  Hostname: {{ (tailscale_verify.stdout | from_json).Self.HostName | default(inventory_hostname) }}"
              - "  IP: {{ ((tailscale_verify.stdout | from_json).Self.TailscaleIPs | default([]))[0] | default('Not assigned') }}"
              - "  Tags: {{ (tailscale_verify.stdout | from_json).Self.Tags | default([]) | join(', ') }}"
          when: tailscale_verify is defined and tailscale_verify.stdout is defined and tailscale_verify.stdout | length > 0
      when: tailscale_enabled | default(false)
