---
- name: GPU Setup for LXC Containers
  hosts: proxmox
  gather_facts: true
  become: true
  vars_files:
    - ../group_vars/all/main.yml
    - ../group_vars/all/vault.yml
  
  vars:
    nvidia_driver_install: true  # Set to false to skip driver installation
    
  tags:
    - gpu
    - drivers
    - lxc

  tasks:
    - name: Check for NVIDIA GPUs
      shell: lspci | grep -i nvidia
      register: nvidia_gpus
      changed_when: false
      failed_when: false
      tags: always
    
    - name: Display GPU information
      debug:
        msg: "{{ nvidia_gpus.stdout_lines }}"
      when: nvidia_gpus.rc == 0
      tags: always
    
    # Remove VFIO Configuration and Enable NVIDIA on Host
    - name: Remove VFIO/Passthrough Configuration
      block:
        - name: Check current GRUB configuration
          slurp:
            src: /etc/default/grub
          register: grub_config

        - name: Configure GRUB for NVIDIA on host (remove passthrough options)
          lineinfile:
            path: /etc/default/grub
            regexp: "^GRUB_CMDLINE_LINUX_DEFAULT="
            line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet"'
            backup: yes
          when: "'vfio' in (grub_config.content | b64decode) or 'nomodeset' in (grub_config.content | b64decode)"
          notify:
            - update grub
            - reboot system

        - name: Remove VFIO modules from boot
          lineinfile:
            path: /etc/modules
            line: "{{ item }}"
            state: absent
          loop:
            - vfio
            - vfio_iommu_type1
            - vfio_pci
            - vfio_virqfd

        - name: Remove VFIO PCI configuration
          file:
            path: /etc/modprobe.d/vfio.conf
            state: absent

        - name: Add NVIDIA modules to load at boot
          lineinfile:
            path: /etc/modules
            line: "{{ item }}"
            create: yes
            state: present
          loop:
            - nvidia
            - nvidia_modeset
            - nvidia_uvm
            - nvidia_drm

        - name: Remove softdep configurations that prevent NVIDIA loading
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /etc/modprobe.d/nvidia.conf
            - /etc/modprobe.d/amdgpu.conf
          failed_when: false

      tags:
        - remove_passthrough

    # NVIDIA Driver Installation
    - name: NVIDIA Driver Installation for LXC
      block:
        - name: Check if nvidia-smi exists
          stat:
            path: /usr/bin/nvidia-smi
          register: nvidia_smi_check
        
        - name: Check current NVIDIA driver version
          command: nvidia-smi --query-gpu=driver_version --format=csv,noheader
          register: current_driver_version
          changed_when: false
          failed_when: false
          when: nvidia_smi_check.stat.exists

        - name: Display current driver version
          debug:
            msg: "Current NVIDIA driver version: {{ current_driver_version.stdout | default('Not installed') }}"

        - name: Check if Debian sources already have non-free components
          shell: |
            grep -q "non-free" /etc/apt/sources.list.d/debian.sources 2>/dev/null || \
            grep -q "non-free" /etc/apt/sources.list.d/*.list 2>/dev/null || \
            echo "not_found"
          register: non_free_check
          changed_when: false
          failed_when: false
        
        - name: Configure APT sources for non-free packages (only if needed)
          copy:
            content: |
              deb http://deb.debian.org/debian trixie main contrib non-free non-free-firmware
              deb http://deb.debian.org/debian trixie-updates main contrib non-free non-free-firmware
              deb http://security.debian.org/debian-security trixie-security main contrib non-free non-free-firmware
            dest: /etc/apt/sources.list.d/debian-non-free.list
            mode: '0644'
          register: apt_sources_updated
          when: 
            - not nvidia_smi_check.stat.exists
            - non_free_check.stdout == "not_found"

        - name: Update APT cache if sources changed
          apt:
            update_cache: yes
          when: apt_sources_updated is defined and apt_sources_updated.changed

        - name: Install build dependencies for NVIDIA drivers
          apt:
            name:
              - build-essential
              - dkms
              - pve-headers
              - pkg-config
              - libglvnd-dev
              - linux-cpupower
            state: present
            update_cache: yes
          when: not nvidia_smi_check.stat.exists

        - name: Create blacklist for nouveau driver
          copy:
            content: |
              # Blacklist nouveau driver for NVIDIA proprietary driver
              blacklist nouveau
              options nouveau modeset=0
            dest: /etc/modprobe.d/blacklist-nouveau.conf
            mode: '0644'
          register: nouveau_blacklisted

        - name: Check if nouveau module is loaded
          shell: lsmod | grep nouveau
          register: nouveau_loaded
          changed_when: false
          failed_when: false

        - name: Unload nouveau module if loaded
          modprobe:
            name: nouveau
            state: absent
          when: nouveau_loaded.rc == 0

        - name: Update initramfs after changes
          command: update-initramfs -u -k all
          when: nouveau_blacklisted.changed

        - name: Install NVIDIA driver from Debian repositories
          apt:
            name:
              - nvidia-driver
              - nvidia-kernel-dkms
              - nvidia-smi
              - nvidia-settings
              - nvidia-persistenced
              - libnvidia-ml-dev
              - nvidia-cuda-toolkit
              - nvidia-cuda-dev
            state: present
            update_cache: yes
          when: not nvidia_smi_check.stat.exists
          register: nvidia_driver_installed

        - name: Load NVIDIA kernel modules
          modprobe:
            name: "{{ item }}"
            state: present
          loop:
            - nvidia
            - nvidia_modeset
            - nvidia_uvm
            - nvidia_drm
          register: module_load_result
          failed_when: false

        - name: Enable nvidia-persistenced service
          systemd:
            name: nvidia-persistenced
            enabled: yes
            state: started
          when: nvidia_driver_installed.changed or module_load_result.changed

        - name: Set NVIDIA persistence mode
          command: nvidia-smi --persistence-mode=1
          register: persistence_result
          changed_when: "'Persistence mode is already Enabled' not in persistence_result.stdout"
          failed_when: false

      when: 
        - nvidia_gpus.rc == 0
        - nvidia_driver_install | default(true)
      tags:
        - drivers

    # NVIDIA Container Toolkit Installation
    - name: Install NVIDIA Container Toolkit for LXC
      block:
        - name: Add NVIDIA Container Toolkit GPG key
          get_url:
            url: https://nvidia.github.io/libnvidia-container/gpgkey
            dest: /usr/share/keyrings/nvidia-container-toolkit-keyring.asc
            mode: '0644'

        - name: Convert GPG key to proper format
          shell: |
            gpg --dearmor < /usr/share/keyrings/nvidia-container-toolkit-keyring.asc > /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg
          args:
            creates: /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg

        - name: Determine deb architecture for NVIDIA repo
          set_fact:
            nvidia_deb_arch: >-
              {{ 'amd64' if ansible_architecture in ['x86_64','amd64'] else
                 'arm64' if ansible_architecture in ['aarch64','arm64'] else
                 'ppc64el' if ansible_architecture in ['ppc64le'] else 'amd64' }}

        - name: Add NVIDIA Container Toolkit repository list
          copy:
            dest: /etc/apt/sources.list.d/nvidia-container-toolkit.list
            mode: '0644'
            content: |
              deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://nvidia.github.io/libnvidia-container/stable/deb/{{ nvidia_deb_arch }} /

        - name: Update apt cache after NVIDIA repo add
          apt:
            update_cache: yes

        - name: Install nvidia-container-toolkit packages
          apt:
            name:
              - nvidia-container-toolkit
              - nvidia-container-runtime
            state: present
            update_cache: yes

        - name: Ensure CDI directory exists
          file:
            path: /etc/cdi
            state: directory
            mode: '0755'

        - name: Generate CDI specification
          command: nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml
          args:
            creates: /etc/cdi/nvidia.yaml

      when: nvidia_gpus.rc == 0
      tags:
        - container-toolkit

    # Configure automatic driver loading on boot
    - name: Ensure NVIDIA drivers load on boot
      block:
        - name: Create systemd service to load NVIDIA drivers on boot
          copy:
            content: |
              [Unit]
              Description=Load NVIDIA drivers and enable persistence mode
              After=multi-user.target
              
              [Service]
              Type=oneshot
              ExecStart=/usr/bin/nvidia-smi
              ExecStart=/usr/bin/nvidia-smi --persistence-mode=1
              RemainAfterExit=yes
              
              [Install]
              WantedBy=multi-user.target
            dest: /etc/systemd/system/nvidia-persistenced-boot.service
            mode: '0644'

        - name: Enable NVIDIA boot service
          systemd:
            name: nvidia-persistenced-boot
            enabled: yes
            daemon_reload: yes
            state: started

        - name: Add cron job for NVIDIA driver loading (backup method)
          cron:
            name: "Load NVIDIA drivers on boot"
            special_time: reboot
            job: "/usr/bin/nvidia-smi > /dev/null 2>&1"
            user: root
            state: present

      when: nvidia_gpus.rc == 0
      tags:
        - boot-config

    # Helper script for LXC configuration
    - name: Create LXC GPU helper script
      copy:
        content: |
          #!/bin/bash
          # LXC GPU Configuration Helper Script for Proxmox
          
          show_gpu_status() {
              echo "=== Host GPU Status ==="
              nvidia-smi 2>/dev/null || echo "NVIDIA drivers not available"
              echo ""
              echo "=== NVIDIA Devices ==="
              ls -la /dev/nvidia* 2>/dev/null || echo "No NVIDIA devices found"
              echo ""
              echo "=== GPU Devices ==="
              lspci | grep -E "VGA|3D|Display"
          }
          
          get_device_ids() {
              echo "=== NVIDIA Device IDs for LXC Configuration ==="
              echo "Add these to your LXC config file (/etc/pve/lxc/<CTID>.conf):"
              echo ""
              
              # Get device major numbers
              for dev in /dev/nvidia*; do
                  if [[ -e "$dev" ]]; then
                      major=$(stat -c '%t' "$dev" | xargs -I {} printf "%d" 0x{})
                      minor=$(stat -c '%T' "$dev" | xargs -I {} printf "%d" 0x{})
                      echo "lxc.cgroup2.devices.allow: c $major:$minor rwm"
                      echo "lxc.mount.entry: $dev $(echo $dev | cut -d'/' -f3) none bind,optional,create=file"
                  fi
              done
              
              echo ""
              echo "Also add:"
              echo "lxc.apparmor.profile: unconfined"
              echo "lxc.cap.drop:"
          }
          
          setup_lxc_gpu() {
              local ctid=$1
              if [[ -z "$ctid" ]]; then
                  echo "Usage: $0 setup_lxc <CTID>"
                  return 1
              fi
              
              local config_file="/etc/pve/lxc/${ctid}.conf"
              if [[ ! -f "$config_file" ]]; then
                  echo "LXC config file not found: $config_file"
                  return 1
              fi
              
              echo "Configuring GPU for LXC $ctid..."
              
              # Backup original config
              cp "$config_file" "${config_file}.backup.$(date +%Y%m%d_%H%M%S)"
              
              # Add GPU configuration if not already present
              if ! grep -q "lxc.apparmor.profile: unconfined" "$config_file"; then
                  echo "lxc.apparmor.profile: unconfined" >> "$config_file"
              fi
              
              # Add device permissions
              for dev in /dev/nvidia*; do
                  if [[ -e "$dev" ]]; then
                      major=$(stat -c '%t' "$dev" | xargs -I {} printf "%d" 0x{})
                      minor=$(stat -c '%T' "$dev" | xargs -I {} printf "%d" 0x{})
                      devname=$(basename "$dev")
                      
                      if ! grep -q "lxc.cgroup2.devices.allow: c $major:$minor" "$config_file"; then
                          echo "lxc.cgroup2.devices.allow: c $major:$minor rwm" >> "$config_file"
                      fi
                      
                      if ! grep -q "lxc.mount.entry: $dev" "$config_file"; then
                          echo "lxc.mount.entry: $dev $devname none bind,optional,create=file" >> "$config_file"
                      fi
                  fi
              done
              
              echo "GPU configuration added to LXC $ctid"
              echo "Restart the container for changes to take effect: pct restart $ctid"
          }
          
          install_in_lxc() {
              echo "=== Commands to run INSIDE the LXC container ==="
              echo ""
              echo "# 1. Install NVIDIA drivers (without kernel modules):"
              echo "apt update && apt install -y nvidia-driver --no-install-recommends"
              echo ""
              echo "# 2. Test GPU access:"
              echo "nvidia-smi"
              echo ""
              echo "# 3. For Docker support, also install:"
              echo "apt install -y nvidia-docker2 nvidia-container-toolkit"
              echo "systemctl restart docker"
              echo ""
              echo "# 4. Test with Docker:"
              echo "docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi"
          }
          
          case "$1" in
              status)
                  show_gpu_status
                  ;;
              get-ids)
                  get_device_ids
                  ;;
              setup-lxc)
                  setup_lxc_gpu $2
                  ;;
              install-guide)
                  install_in_lxc
                  ;;
              *)
                  echo "Usage: $0 {status|get-ids|setup-lxc <CTID>|install-guide}"
                  echo ""
                  echo "  status        - Show GPU and driver status"
                  echo "  get-ids       - Get device IDs for manual LXC configuration"
                  echo "  setup-lxc     - Automatically configure LXC container for GPU"
                  echo "  install-guide - Show commands to run inside LXC container"
                  exit 1
                  ;;
          esac
        dest: /usr/local/bin/lxc-gpu-helper
        mode: "0755"
      tags:
        - tools

    - name: Final GPU Status Check
      block:
        - name: Run nvidia-smi for final verification
          command: nvidia-smi
          register: final_nvidia_check
          changed_when: false
          failed_when: false

        - name: Check NVIDIA devices
          shell: ls -la /dev/nvidia* | head -10
          register: nvidia_devices
          changed_when: false
          failed_when: false

        - name: Display final GPU status
          debug:
            msg: |
              {% if final_nvidia_check.rc == 0 %}
              ✅ NVIDIA drivers installed and working on host
              
              Devices available:
              {{ nvidia_devices.stdout }}
              
              Next steps:
              1. Create an LXC container
              2. Run: lxc-gpu-helper setup-lxc <CTID>
              3. Inside container, run: lxc-gpu-helper install-guide
              
              GPU Status:
              {{ final_nvidia_check.stdout_lines | join('\n') }}
              {% else %}
              ⚠️  NVIDIA drivers not loaded. Reboot may be required.
              Run 'systemctl status nvidia-persistenced-boot' to check
              {% endif %}
      tags:
        - verify

  handlers:
    - name: update grub
      command: update-grub
      listen: "update grub"

    - name: reboot system
      reboot:
        msg: "Rebooting to apply GPU configuration changes"
        pre_reboot_delay: 10
        post_reboot_delay: 30
      listen: "reboot system"