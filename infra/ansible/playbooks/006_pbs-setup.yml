---
- name: Proxmox Backup Server Installation and Configuration
  hosts: proxmox
  gather_facts: true
  become: true
  vars_files:
    - ../group_vars/all/main.yml
    - ../group_vars/all/vault.yml
  
  vars:
    pbs_datastore_name: "{{ pbs_datastore_name | default('backup-store') }}"
    pbs_disk_size: 18.2T
    
  tags:
    - pbs
    - backup
  
  tasks:
    - name: Ensure enterprise repos are removed
      import_tasks: ../tasks/remove_enterprise_repos.yml

    - name: Ensure PBS datastore path variable is set
      set_fact:
        pbs_datastore_path: "{{ pbs_datastore_path | default('/mnt/backup-datastore') }}"

    - name: Check if Proxmox archive keyring exists
      stat:
        path: /usr/share/keyrings/proxmox-archive-keyring.gpg
      register: pve_keyring_check
    
    - name: Download Proxmox archive keyring
      get_url:
        url: http://download.proxmox.com/debian/proxmox-release-trixie.gpg
        dest: /usr/share/keyrings/proxmox-archive-keyring.gpg
        mode: '0644'
      when: not pve_keyring_check.stat.exists
    
    - name: Check if PBS repository already exists in any format
      shell: |
        ls /etc/apt/sources.list.d/pbs-no-subscription.* 2>/dev/null || echo "not_found"
      register: pbs_repo_check
      changed_when: false
    
    # Already handled by enterprise repo removal task
    
    - name: Remove duplicate PBS no-subscription sources file (keep .list)
      file:
        path: /etc/apt/sources.list.d/pbs-no-subscription.sources
        state: absent
      when: "'pbs-no-subscription.list' in pbs_repo_check.stdout"
    
    - name: Update apt cache
      apt:
        update_cache: yes
      when: not (ansible_check_mode | default(false))
    
    - name: Install Proxmox Backup Server
      apt:
        name:
          - proxmox-backup-server
          - proxmox-backup-client
        state: present

    - name: Ensure enterprise repos are removed after PBS install
      import_tasks: ../tasks/remove_enterprise_repos.yml
    
    - name: Create backup user if needed
      user:
        name: backup
        system: yes
        shell: /bin/bash
        home: /var/lib/backup
        create_home: yes
      failed_when: false  # User might already exist from PBS install
    
    - name: Create backup datastore directory
      file:
        path: "{{ pbs_datastore_path }}"
        state: directory
        mode: '0755'
        owner: backup
        group: backup
    
    - name: Get base disk device name (remove -partN suffix)
      set_fact:
        pbs_base_disk: "{{ pbs_disk_device | regex_replace('-part[0-9]+$', '') }}"
    
    - name: Check if PBS base disk exists
      stat:
        path: "{{ pbs_base_disk }}"
      register: pbs_disk_check
    
    - name: Check if disk is mounted
      shell: "mount | grep {{ pbs_base_disk }} || true"
      register: mount_check
      changed_when: false
      when: pbs_disk_check.stat.exists
    
    - name: Unmount disk if mounted
      mount:
        path: "{{ pbs_datastore_path }}"
        state: unmounted
      when:
        - pbs_disk_check.stat.exists
        - mount_check.stdout | length > 0
    
    - name: Check for existing partitions on disk
      shell: "lsblk -n {{ pbs_base_disk }} | grep -c part || true"
      register: partition_count
      changed_when: false
      when: pbs_disk_check.stat.exists
    
    - name: Wipe disk completely if it has partitions (guarded)
      command: |
        wipefs -a {{ pbs_base_disk }}
      when:
        - pbs_disk_check.stat.exists
        - partition_count.stdout | int > 0
        - pbs_wipe_disk | default(false)
      changed_when: true
    
    - name: Zero out partition table area (guarded)
      command: |
        dd if=/dev/zero of={{ pbs_base_disk }} bs=1M count=100
      when:
        - pbs_disk_check.stat.exists
        - partition_count.stdout | int > 0
        - pbs_wipe_disk | default(false)
      changed_when: true
    
    - name: Check if filesystem already exists
      command: blkid {{ pbs_base_disk }}
      register: fs_check
      failed_when: false
      changed_when: false
      when: pbs_disk_check.stat.exists
    
    - name: Create fresh ext4 filesystem directly on disk
      filesystem:
        fstype: ext4
        dev: "{{ pbs_base_disk }}"
        force: yes
        opts: "-L PBS_BACKUP"
      when: 
        - pbs_disk_check.stat.exists
        - fs_check.rc != 0 or partition_count.stdout | int > 0
    
    - name: Get UUID of backup disk
      command: blkid -s UUID -o value {{ pbs_base_disk }}
      register: disk_uuid
      changed_when: false
      when: pbs_disk_check.stat.exists
    
    - name: Check if backup disk is already mounted
      command: mount | grep {{ pbs_datastore_path }}
      register: mount_status
      failed_when: false
      changed_when: false
      when: pbs_disk_check.stat.exists

    - name: Mount backup disk
      mount:
        path: "{{ pbs_datastore_path }}"
        src: "UUID={{ disk_uuid.stdout }}"
        fstype: ext4
        opts: defaults,noatime
        state: mounted
      when: 
        - pbs_disk_check.stat.exists
        - disk_uuid.stdout is defined
        - disk_uuid.stdout | length > 0
        - mount_status.rc != 0
    
    - name: Display warning if disk not available
      debug:
        msg: "WARNING: PBS disk device {{ pbs_base_disk }} not found or has no filesystem. PBS will use local storage instead."
      when: not pbs_disk_check.stat.exists or (disk_uuid.stdout is not defined) or (disk_uuid.stdout | length == 0)
    
    - name: Set ownership for backup directory (non-recursive for performance)
      file:
        path: "{{ pbs_datastore_path }}"
        owner: backup
        group: backup
        # Don't recurse on large disks - PBS will handle its own files
        recurse: no
    
    - name: Enable and start PBS services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - proxmox-backup
        - proxmox-backup-proxy
      register: pbs_service_start
      # Don't fail if services are already running
      failed_when: false
    
    - name: Wait for PBS API to be available
      wait_for:
        port: 8007
        host: localhost
        delay: 2
        timeout: 30
    
    - name: Check if PBS datastore exists
      command: proxmox-backup-manager datastore list --output-format json
      register: existing_datastores
      changed_when: false
      check_mode: no
    
    - name: Check if PBS chunks directory exists
      stat:
        path: "{{ pbs_datastore_path }}/.chunks"
      register: chunks_dir_check
    
    - name: Create or reuse PBS datastore
      command: |
        proxmox-backup-manager datastore create {{ pbs_datastore_name }} {{ pbs_datastore_path }} \
          --reuse-datastore true
      when: pbs_datastore_name not in (existing_datastores.stdout | from_json | map(attribute='name') | list)
      register: datastore_create
      changed_when: datastore_create.rc == 0
      failed_when: 
        - datastore_create.rc != 0
        - "'already exists' not in datastore_create.stderr"
    
    - name: Configure PBS garbage collection and retention
      command: |
        proxmox-backup-manager datastore update {{ pbs_datastore_name }} \
          --gc-schedule 'daily 02:20' \
          --keep-hourly 24 \
          --keep-daily 7 \
          --keep-weekly 4 \
          --keep-monthly 6 \
          --keep-yearly 2
      failed_when: false
      changed_when: false
    
    - name: Get PBS fingerprint (with timeout)
      shell: |
        timeout 10s openssl s_client -servername localhost -connect localhost:8007 </dev/null 2>/dev/null | \
        openssl x509 -fingerprint -sha256 -noout | \
        cut -d'=' -f2 | tr -d ':' | tr '[:upper:]' '[:lower:]' | \
        sed 's/\(..\)/\1:/g; s/:$//'
      register: pbs_fingerprint
      changed_when: false
      failed_when: pbs_fingerprint.stdout is not defined or pbs_fingerprint.stdout | length == 0
    
    - name: Ensure PBS root user has proper password
      shell: |
        echo "root:{{ vault_root_password }}" | chpasswd
      no_log: true
      changed_when: false
    
    - name: Add PBS storage to PVE using root credentials
      command: |
        pvesm add pbs local-pbs \
          --server 127.0.0.1 \
          --datastore {{ pbs_datastore_name }} \
          --username root@pam \
          --password '{{ vault_root_password }}' \
          --fingerprint "{{ pbs_fingerprint.stdout }}"
      register: pbs_storage_add
      failed_when: false
      changed_when: pbs_storage_add.rc == 0
      no_log: true
    
    - name: Enable PBS storage in PVE
      command: pvesm set local-pbs --disable 0
      failed_when: false
      changed_when: false
    
    - name: Set PBS storage content types
      command: pvesm set local-pbs --content backup
      failed_when: false
      changed_when: false
    
    - name: Configure PBS API access
      lineinfile:
        path: /etc/proxmox-backup/proxy.cfg
        line: "{{ item }}"
        create: yes
      loop:
        - "bind 0.0.0.0:8007"
        - "ssl true"
    
    - name: Ensure root user has admin permissions in PBS
      command: |
        proxmox-backup-manager acl update / Admin --auth-id root@pam
      failed_when: false
      changed_when: false
    
    - name: Configure PBS email notifications
      lineinfile:
        path: /etc/proxmox-backup/node.cfg
        line: "email-from: pbs@{{ ansible_hostname }}.local"
        create: yes
    
    - name: Setup PBS verification job
      copy:
        content: |
          #!/bin/bash
          # PBS Verification Job
          proxmox-backup-manager verify {{ pbs_datastore_name }} --outdated-after 30
        dest: /usr/local/bin/pbs-verify
        mode: '0755'
    
    - name: Create PBS verification cron job
      cron:
        name: "PBS verification"
        minute: "0"
        hour: "3"
        job: "/usr/local/bin/pbs-verify"
        user: root
    
    - name: Configure PBS prune schedule
      copy:
        content: |
          #!/bin/bash
          # PBS Prune Job
          proxmox-backup-manager prune {{ pbs_datastore_name }} \
            --keep-hourly 24 \
            --keep-daily 7 \
            --keep-weekly 4 \
            --keep-monthly 6 \
            --keep-yearly 2
        dest: /usr/local/bin/pbs-prune
        mode: '0755'
    
    - name: Create PBS prune cron job
      cron:
        name: "PBS prune old backups"
        minute: "30"
        hour: "1"
        job: "/usr/local/bin/pbs-prune"
        user: root
    
    - name: Display PBS information
      debug:
        msg:
          - "PBS installed and configured successfully"
          - "Datastore: {{ pbs_datastore_name }}"
          - "Path: {{ pbs_datastore_path }}"
          - "Fingerprint: {{ pbs_fingerprint.stdout }}"
          - "Web UI: https://{{ ansible_default_ipv4.address }}:8007"