---
# Main Proxmox Configuration Playbook
# This orchestrates all component playbooks in the correct order

- name: Verify connectivity
  hosts: proxmox
  gather_facts: false
  tags: always
  tasks:
    - name: Test connection
      ping:
    - name: Gather facts for all plays
      setup:

- import_playbook: proxmox/001_base-setup.yml
  tags: base

- import_playbook: proxmox/002_zfs-setup.yml
  tags: zfs

- import_playbook: proxmox/003_network-setup.yml
  tags: network

- import_playbook: proxmox/004_sdn-setup.yml
  tags: sdn

- import_playbook: proxmox/005_gpu-setup.yml
  tags: gpu

- import_playbook: proxmox/006_pbs-setup.yml
  tags: pbs

- import_playbook: proxmox/007_storage-setup.yml
  tags: storage

- import_playbook: proxmox/008_backup-jobs.yml
  tags: backup

- import_playbook: proxmox/009_tailscale-setup.yml
  tags: tailscale

- name: Final validation
  hosts: proxmox
  gather_facts: false
  tags: always
  tasks:
    - name: Verify all services are running
      systemd:
        name: "{{ item }}"
        state: started
      loop:
        - pve-cluster
        - pvedaemon
        - pveproxy
        - pvestatd
      check_mode: yes
      register: service_status

    - name: Get actual PVE storage status
      command: pvesm status
      register: pve_storage_status
      changed_when: false
      failed_when: false
    
    - name: Get actual ZFS pools
      command: zpool list -H -o name
      register: zpool_list
      changed_when: false
      failed_when: false
    
    - name: Validate SDN configuration
      shell: |
        # Check if SDN zones exist
        pvesh get /cluster/sdn/zones --output-format json | jq -r '.[].zone' 2>/dev/null || echo "none"
      register: sdn_zones_check
      changed_when: false
      failed_when: false

    - name: Validate SDN VNets
      shell: |
        # Check if SDN vnets exist
        pvesh get /cluster/sdn/vnets --output-format json | jq -r '.[].vnet' 2>/dev/null || echo "none"
      register: sdn_vnets_check
      changed_when: false
      failed_when: false

    - name: Check dnsmasq@sibzone service status
      systemd:
        name: dnsmasq@sibzone
      register: dnsmasq_sibzone_status
      check_mode: yes
      failed_when: false

    - name: Check Tailscale status if enabled
      command: tailscale status --json
      register: tailscale_status_check
      changed_when: false
      failed_when: false
      when: tailscale_enabled | default(false)

    - name: Display configuration summary
      debug:
        msg:
          - "âœ… Proxmox configuration complete!"
          - "Node: {{ proxmox_node_name | default(ansible_hostname | default(inventory_hostname)) }}"
          - "IP: {{ proxmox_ip | default(ansible_default_ipv4.address | default('n/a')) }}"
          - "ZFS Pools: {{ zpool_list.stdout_lines | default([]) | join(', ') or 'None configured' }}"
          - "Active Storages: {{ pve_storage_status.stdout_lines | select('match', '^[a-z]') | list | length }} storage(s) configured"
          - "PBS Backup: {{ 'Configured' if 'local-pbs' in pve_storage_status.stdout else 'Not configured' }}"
          - "NVIDIA GPUs: 2x RTX 3090 ready for LXC passthrough"
          - "SDN Zones: {{ sdn_zones_check.stdout | default('none') }}"
          - "SDN VNets: {{ sdn_vnets_check.stdout | default('none') }}"
          - "DHCP Service: {{ 'Running' if dnsmasq_sibzone_status.status is defined and dnsmasq_sibzone_status.status.ActiveState == 'active' else 'Not running' }}"
          - "Tailscale: {{ 'Connected (' + ((tailscale_status_check.stdout | default('{}') | from_json).Self.TailscaleIPs | default([]))[0] + ')' if tailscale_enabled and tailscale_status_check.rc == 0 else 'Disabled/Not connected' }}"
