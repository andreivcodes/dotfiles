---
- name: Configure PBS Storage and Backup Jobs
  hosts: proxmox
  gather_facts: true
  become: true
  vars_files:
    - ../group_vars/all/main.yml
    - ../group_vars/all/vault.yml
  
  vars:
    pbs_datastore_name: "{{ pbs_datastore_name | default('backup-store') }}"
    
  tags:
    - backup
  
  tasks:
    - name: Check if PBS is running
      systemd:
        name: proxmox-backup
        state: started
      register: pbs_status
      failed_when: false
    
    # Fingerprint not needed here; storage is created in PBS setup
    
    - name: Check existing PBS storages
      command: pvesm status
      register: storage_status
      changed_when: false
      failed_when: false
    
    - name: Check if local-pbs storage already exists
      set_fact:
        pbs_storage_exists: "{{ 'local-pbs' in storage_status.stdout }}"
    
    - name: Set PBS password environment variable
      set_fact:
        pbs_password: "{{ vault_root_password }}"
      no_log: true
      when: vault_root_password is defined
    
    - name: Ensure PBS storage is enabled (added in PBS setup)
      command: pvesm set local-pbs --disable 0
      failed_when: false
    
    - name: Set PBS storage as shared
      command: pvesm set local-pbs --shared 1
      failed_when: false
    
    - name: Check if any VMs exist
      shell: qm list 2>/dev/null | grep -v VMID | awk '{print $1}' || true
      register: vm_list
      changed_when: false
    
    - name: Check if any LXCs exist  
      shell: pct list 2>/dev/null | grep -v VMID | awk '{print $1}' || true
      register: lxc_list
      changed_when: false
    
    - name: Get all VM and LXC IDs
      set_fact:
        all_guest_ids: "{{ (vm_list.stdout_lines + lxc_list.stdout_lines) | select | list | join(',') }}"
    
    - name: Check existing backup jobs
      command: pvesh get /cluster/backup --output-format json
      register: existing_backup_jobs
      changed_when: false
      failed_when: false
    
    - name: Initialize existing_job_ids when list not available
      set_fact:
        existing_job_ids: []
      when: existing_backup_jobs is failed or (existing_backup_jobs.stdout | default('') | length) == 0

    - name: Parse existing backup jobs when available
      set_fact:
        existing_job_ids: "{{ existing_backup_jobs.stdout | from_json | map(attribute='id') | list }}"
      when: existing_backup_jobs is succeeded and (existing_backup_jobs.stdout | default('') | length) > 0
    
    - name: Create backup job for all VMs and containers
      shell: |
        pvesh create /cluster/backup \
          --id backup-all \
          --schedule "*/2:00" \
          --storage local-pbs \
          --mode snapshot \
          --compress zstd \
          --all 1 \
          --enabled 1 \
          --mailnotification failure \
          --prune-backups "keep-hourly=24,keep-daily=7,keep-weekly=4,keep-monthly=6"
      register: backup_job_create
      failed_when: 
        - backup_job_create.rc != 0
        - "'already exists' not in backup_job_create.stderr"
      when: all_guest_ids | length > 0 or True  # Create job even if no guests yet
    
    - name: Create individual backup job per VM (alternative approach)
      shell: |
        pvesh create /cluster/backup \
          --id "backup-vm-{{ item }}" \
          --schedule "*/2:00" \
          --storage local-pbs \
          --vmid {{ item }} \
          --mode snapshot \
          --compress zstd \
          --enabled 1 \
          --prune-backups "keep-hourly=24,keep-daily=7,keep-weekly=4,keep-monthly=6"
      loop: "{{ vm_list.stdout_lines }}"
      when: 
        - vm_list.stdout_lines | length > 0
        - false  # Disabled in favor of single job for all
      failed_when: false
    
    - name: Create individual backup job per container (alternative approach)
      shell: |
        pvesh create /cluster/backup \
          --id "backup-ct-{{ item }}" \
          --schedule "*/2:00" \
          --storage local-pbs \
          --vmid {{ item }} \
          --mode snapshot \
          --compress zstd \
          --enabled 1 \
          --prune-backups "keep-hourly=24,keep-daily=7,keep-weekly=4,keep-monthly=6"
      loop: "{{ lxc_list.stdout_lines }}"
      when: 
        - lxc_list.stdout_lines | length > 0
        - false  # Disabled in favor of single job for all
      failed_when: false
    
    - name: Verify PBS storage is accessible
      shell: |
        pvesm status | grep "^local-pbs" | grep -q "active" && echo "accessible" || echo "not accessible"
      register: pbs_storage_test
      changed_when: false
      failed_when: false
    
    - name: Test PBS connectivity directly
      shell: |
        export PBS_PASSWORD='{{ vault_root_password }}'
        timeout 5 proxmox-backup-client list --repository root@pam@127.0.0.1:{{ pbs_datastore_name }} 2>&1 || echo "failed"
      register: pbs_direct_test
      failed_when: false
      changed_when: false
      no_log: true
      ignore_errors: yes

    - name: Derive backup status facts for summary
      set_fact:
        pbs_storage_status_msg: "{{ 'Connected' if (pbs_storage_test.stdout is defined and 'accessible' in pbs_storage_test.stdout) else 'Not accessible' }}"
        pbs_test_msg: "{{ 'Success' if (pbs_direct_test.stdout is defined and pbs_direct_test.stdout != 'failed') else 'Check credentials' }}"
    
    - name: Display backup configuration status
      debug:
        msg:
          - "PBS Storage Status: {{ pbs_storage_status_msg }}"
          - "Backup Job: Created for all VMs and LXCs"
          - "Schedule: Every 2 hours (0 */2 * * *)"
          - "Storage: local-pbs"
          - "Retention: 24 hourly, 7 daily, 4 weekly, 6 monthly"
          - "Current VMs: {{ vm_list.stdout_lines | length }}"
          - "Current LXCs: {{ lxc_list.stdout_lines | length }}"
          - "PBS Test: {{ pbs_test_msg }}"
    
    - name: Run initial backup test (optional)
      command: |
        pvesh create /nodes/{{ ansible_hostname }}/vzdump \
          --storage local-pbs \
          --mode snapshot \
          --compress zstd \
          --all 1
      when: false  # Set to true if you want to run a test backup immediately
      register: test_backup
      failed_when: false